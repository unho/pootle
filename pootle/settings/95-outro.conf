#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Setup things that depend on other settings."""

import logging


# Load custom settings if any have been defined
pootle_settings_envvar = 'POOTLE_SETTINGS'
pootle_settings_filepath = os.environ.get(pootle_settings_envvar, None)

if pootle_settings_filepath:
    logger = logging.getLogger('pootle.settings')

    # Set a handler to avoid the "No handlers could be found" error to happen.
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Set the appropiate logging level
    logger.setLevel(logging.DEBUG if DEBUG else logging.INFO)

    try:
        logger.info(u"Loading custom settings from %r...",
                    pootle_settings_filepath)
        execfile(os.path.abspath(pootle_settings_filepath))
    except (IOError, OSError), e:
        logger.error(u"Cannot access configuration file at %r as defined by "
                     u"the %r environment variable:\n%s",
                     pootle_settings_filepath, pootle_settings_envvar, e)
        import sys
        sys.exit(1)


if CONTACT_EMAIL:
    MANAGERS += (('CONTACT', CONTACT_EMAIL),)

# Look for localization files under the 'locale' directory
LOCALE_PATHS = (working_path("locale"), )

from pootle.i18n import override
LANGUAGES = override.find_languages(LOCALE_PATHS[0])
override.hijack_translation()


# Setup a tempdir inside the ``PODIRECTORY`` hierarchy, this way we have
# reasonable guarantee that temp files will be created on the same
# filesystem as translation files (required for save operations).
import tempfile
tempfile.tempdir = os.path.join(PODIRECTORY, ".tmp")
# Ensure that temp dir exists
if not os.path.exists(tempfile.tempdir):
    os.mkdir(tempfile.tempdir)


TEMPLATE_DEBUG = DEBUG
if TEMPLATE_DEBUG:
    TEMPLATE_CONTEXT_PROCESSORS += ("django.core.context_processors.debug",)

if DEBUG:
    TEMPLATE_LOADERS = (
        'django.template.loaders.app_directories.Loader',
        'django.template.loaders.filesystem.Loader',
    )

    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s %(levelname)s %(message)s',
    )
else:
    # We should only enable caching with DEBUG = False
    TEMPLATE_LOADERS = (
        ('django.template.loaders.cached.Loader', (
            'django.template.loaders.app_directories.Loader',
            'django.template.loaders.filesystem.Loader',
        )),
    )

    # Will log only CRITICAL errors to the console
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(levelname)s %(message)s',
    )


# Temporarily enable South for Django < 1.7
from django import VERSION

if VERSION < (1, 7, 0):
    INSTALLED_APPS += ['south']


# FIXME: This is necessary to avoid a false positive in the Django's
# system check framework. Remove it once in Django 1.8.
# Refs. https://code.djangoproject.com/ticket/23469
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
